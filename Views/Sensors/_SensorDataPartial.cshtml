@model CleanroomMonitoring.Web.ViewModels.SensorViewModel2

@if (Model.SensorInfo == null) {
    <div class="alert alert-warning">
        Sensor information not available.
    </div>
    return;
}

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Sensor information</h5>
            </div>
            <div class="card-body">
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <th>Nom du capteur</th>
                            <td>@Model.SensorInfo.SensorName</td>
                        </tr>
                        <tr>
                            <th>Type de capteur</th>
                            <td>@(Model.SensorType?.TypeName ?? "Undefined") (@(Model.SensorType?.Unit ?? ""))</td>
                        </tr>
                        <tr>
                            <th>Salle</th>
                            <td>@(Model.CleanRoom?.RoomName ?? "Undefined") (@(Model.CleanRoom?.CleanRoomClass ?? ""))</td>
                        </tr>
                        <tr>
                            <th>Adresse Modbus</th>
                            <td>@(Model.SensorInfo.ModbusAddress?.ToString() ?? "Undefined")</td>
                        </tr>
                        <tr>
                            <th>Adresse IP</th>
                            <td>@(Model.SensorInfo.IpAddress ?? "Undefined")</td>
                        </tr>
                        <tr>
                            <th>Phase</th>
                            <td>@(Model.SensorInfo.Phase ?? "Undefined")</td>
                        </tr>
                        <tr>
                            <th>Statut</th>
                            <td>
                                @if (Model.SensorInfo.IsActive) {
                                    <span class="badge bg-success">Active</span>
                                }
                                else {
                                    <span class="badge bg-danger">Inactive</span>
                                }
                            </td>
                        </tr>
                        <tr>
                            <th>Commentaire</th>
                            <td>@(Model.SensorInfo.COMMENT ?? "No comments")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        @if (Model.SensorLocations != null && Model.SensorLocations.Any()) {
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Emplacements du capteur</h5>
                </div>
                <div class="card-body">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Nom de l'emplacement</th>
                                <th>Coordonnées</th>
                                <th>Statut</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var location in Model.SensorLocations) {
                                <tr>
                                    <td>@(location.LocationName ?? "Undefined")</td>
                                    <td>
                                        X: @(location.XCoordinate ?? "N/A"),
                                        Y: @(location.YCoordinate ?? "N/A"),
                                        Z: @(location.ZCoordinate ?? "N/A")
                                    </td>
                                    <td>
                                        @if (location.IsActive) {
                                            <span class="badge bg-success">Actif</span>
                                        }
                                        else {
                                            <span class="badge bg-danger">Inactif</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>

    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Data graph</h5>
                <small class="text-muted">
                    Range : @Model.StartDate.ToString("dd/MM/yyyy HH:mm") - @Model.EndDate.ToString("dd/MM/yyyy HH:mm")
                </small>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="sensorChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h5>Sensor data</h5>
        <small class="text-muted">
            Number of records : @Model.SensorReadings?.Count
        </small>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Date and Time</th>
                        <th>Value</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.SensorReadings != null && Model.SensorReadings.Any()) {
                        foreach (var reading in Model.SensorReadings) {
                            <tr>
                                <td>@reading.ReadingTime?.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                <td>@reading.ReadingValue @(Model.SensorType?.Unit ?? "")</td>
                                <td>
                                    @if (reading.IsValid == true) {
                                        <span class="badge bg-success">Valide</span>
                                    }
                                    else {
                                        <span class="badge bg-warning">Non valide</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else {
                        <tr>
                            <td colspan="3" class="text-center">No data available for the selected period</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // This script will be executed after loading the partial data
    $(document).ready(function() {
        // Load the chart data
        $.ajax({
            url: '@Url.Action("GetChartData", "Sensors")',
            type: 'GET',
            data: {
                sensorInfoId: @Model.SensorInfo.SensorInfoID,
                timeRange: '@Model.TimeRange',
                startDate: '@Model.StartDate.ToString("yyyy-MM-ddTHH:mm:ss")',
                endDate: '@Model.EndDate.ToString("yyyy-MM-ddTHH:mm:ss")'
            },
            success: function(data) {
                updateChart(data);
            },
            error: function(error) {
                console.error("Error loading data from the chart:", error);
            }
        });

       // Function to update the chart
        function updateChart(data) {
            const ctx = document.getElementById('sensorChart');
            if (!ctx) return;

           // Destroy the existing chart if it exists
            if (window.sensorChart) {
                window.sensorChart.destroy();
            }

          // Create a new chart
            window.sensorChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: `${data.sensorName} (${data.unit})`,
                        data: data.values,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        tension: 0.1,
                        pointRadius: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: `Measurement history - ${data.sensorName}`
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: data.unit
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        }
                    }
                }
            });
        }
    });
</script>