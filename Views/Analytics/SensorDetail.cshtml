@model CleanroomMonitoring.Web.ViewModels.SensorDetailViewModel
@{
    ViewData["Title"] = "Thông tin chi tiết cảm biến";
}

<div class="container-fluid mt-4">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Analytics" asp-action="Index">Phân tích</a></li>
                    <li class="breadcrumb-item"><a asp-controller="Analytics" asp-action="Index" asp-route-roomId="@Model.RoomID">@Model.RoomName</a></li>
                    <li class="breadcrumb-item active">@Model.SensorName</li>
                </ol>
            </nav>
            <h1 class="h2 mb-4">@Model.SensorName</h1>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Thông tin cảm biến</h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Tên cảm biến:</dt>
                        <dd class="col-sm-8">@Model.SensorName</dd>

                        <dt class="col-sm-4">Loại cảm biến:</dt>
                        <dd class="col-sm-8">@Model.SensorTypeName</dd>

                        <dt class="col-sm-4">Phòng:</dt>
                        <dd class="col-sm-8">@Model.RoomName</dd>

                        <dt class="col-sm-4">Đơn vị đo:</dt>
                        <dd class="col-sm-8">@Model.Unit</dd>
                    </dl>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Dữ liệu trong khoảng thời gian</h5>
                        <form class="form-inline" id="dateRangeForm">
                            <input type="hidden" name="sensorId" value="@Model.SensorInfoID" />
                            <div class="input-group input-group-sm">
                                <input type="date" class="form-control" name="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                                <div class="input-group-prepend input-group-append">
                                    <span class="input-group-text">đến</span>
                                </div>
                                <input type="date" class="form-control" name="endDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
                                <div class="input-group-append">
                                    <button type="submit" class="btn btn-light">Cập nhật</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        Đang hiển thị dữ liệu từ @Model.StartDate.ToString("dd/MM/yyyy") đến @Model.EndDate.ToString("dd/MM/yyyy")
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Biểu đồ dữ liệu</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="height: 400px;">
                        <canvas id="sensorChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4 mb-3">
            <div class="card h-100">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Thống kê cơ bản</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col">
                            <div class="h4">@Model.MinValue.ToString("0.##") @Model.Unit</div>
                            <div>Giá trị thấp nhất</div>
                        </div>
                        <div class="col">
                            <div class="h4">@Model.MaxValue.ToString("0.##") @Model.Unit</div>
                            <div>Giá trị cao nhất</div>
                        </div>
                        <div class="col">
                            <div class="h4">@Model.AvgValue.ToString("0.##") @Model.Unit</div>
                            <div>Giá trị trung bình</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-3">
            <div class="card h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Bản ghi</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col">
                            <div class="h4">@Model.ValidReadings</div>
                            <div>Hợp lệ</div>
                        </div>
                        <div class="col">
                            <div class="h4">@Model.InvalidReadings</div>
                            <div>Không hợp lệ</div>
                        </div>
                        <div class="col">
                            <div class="h4">@(Model.ValidReadings + Model.InvalidReadings)</div>
                            <div>Tổng cộng</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-3">
            <div class="card h-100">
                <div class="card-header bg-warning text-dark">
                    <h5 class="card-title mb-0">Phân tích dữ liệu</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group list-group-flush">
                        @if (Model.ValidReadings > 0) {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Xem biểu đồ theo giờ
                                <a href="#" class="btn btn-sm btn-primary" id="btnHourlyView">Xem</a>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Xuất dữ liệu CSV
                                <a asp-controller="Analytics" asp-action="ExportSensorData" asp-route-sensorId="@Model.SensorInfoID"
                                   asp-route-startDate="@Model.StartDate.ToString("yyyy-MM-dd")"
                                   asp-route-endDate="@Model.EndDate.ToString("yyyy-MM-dd")"
                                   class="btn btn-sm btn-secondary">
                                    Tải xuống
                                </a>
                            </li>
                        }
                        else {
                            <li class="list-group-item text-center text-muted">
                                Không có đủ dữ liệu để phân tích thêm
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    @if (Model.ChartData != null && Model.ChartData.Any()) {
        <div class="row mb-4">
            <div class="col">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">Bảng dữ liệu</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover" id="dataTable">
                                <thead>
                                    <tr>
                                        <th>Thời gian</th>
                                        <th>Giá trị (@Model.Unit)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var point in Model.ChartData.Take(100)) {
                                        <tr>
                                            <td>@point.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                            <td>@point.Value.ToString("0.##")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @if (Model.ChartData.Count > 100) {
                                <div class="text-center text-muted">
                                    Hiển thị 100 bản ghi đầu tiên. Tải xuống để xem toàn bộ dữ liệu.
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Dữ liệu cho biểu đồ
            const chartData = @Html.Raw(Json.Serialize(Model.ChartData));

            // Thiết lập biểu đồ
            const ctx = document.getElementById('sensorChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: '@Model.SensorName (@Model.Unit)',
                        data: chartData.map(point => ({
                            x: new Date(point.timestamp),
                            y: point.value
                        })),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'dd/MM/yyyy'
                                }
                            },
                            title: {
                                display: true,
                                text: 'Thời gian'
                            }
                        },
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: '@Model.Unit'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: function(context) {
                                    const date = new Date(context[0].parsed.x);
                                    return date.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });

            // Xử lý nút xem biểu đồ theo giờ
            document.getElementById('btnHourlyView').addEventListener('click', async function(e) {
                e.preventDefault();
                try {
                    const response = await fetch(`/Analytics/GetHourlyData?sensorId=@Model.SensorInfoID&startDate=@Model.StartDate.ToString("yyyy-MM-dd")&endDate=@Model.EndDate.ToString("yyyy-MM-dd")`);
                    const hourlyData = await response.json();

                    // Cập nhật biểu đồ
                    chart.data.datasets[0].data = hourlyData.hourly.map(point => ({
                        x: new Date(point.timestamp),
                        y: point.value
                    }));
                    chart.options.scales.x.time.unit = 'hour';
                    chart.options.scales.x.time.displayFormats.hour = 'HH:mm';
                    chart.update();

                    // Thay đổi text của nút
                    this.textContent = 'Xem dữ liệu gốc';
                    this.removeEventListener('click', arguments.callee);
                    this.addEventListener('click', function() {
                        chart.data.datasets[0].data = chartData.map(point => ({
                            x: new Date(point.timestamp),
                            y: point.value
                        }));
                        chart.options.scales.x.time.unit = 'day';
                        chart.options.scales.x.time.displayFormats.day = 'dd/MM/yyyy';
                        chart.update();

                        this.textContent = 'Xem';
                        this.removeEventListener('click', arguments.callee);
                        document.getElementById('btnHourlyView').click = document.getElementById('btnHourlyView').addEventListener('click', arguments.callee.caller);
                    });
                } catch (error) {
                    console.error('Lỗi khi tải dữ liệu theo giờ:', error);
                    alert('Không thể tải dữ liệu theo giờ. Vui lòng thử lại sau.');
                }
            });
        });
    </script>


}